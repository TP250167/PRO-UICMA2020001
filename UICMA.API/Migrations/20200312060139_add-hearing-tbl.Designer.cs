// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UICMA.Repository;

namespace UICMA.API.Migrations
{
    [DbContext(typeof(UICMAContext))]
    [Migration("20200312060139_add-hearing-tbl")]
    partial class addhearingtbl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UICMA.Domain.Entities.ALJ_Decision.ALJDecision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ALJName")
                        .HasColumnName("ALJ_NAME");

                    b.Property<DateTime?>("ApplicationReopenDate")
                        .HasColumnName("APPLICATION_REOPEN_DATE");

                    b.Property<DateTime?>("BYBClaimDate")
                        .HasColumnName("BYB_CLAIM_DATE");

                    b.Property<string>("CaseNumber")
                        .HasColumnName("CASE_NUMBER");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("Decision")
                        .HasColumnName("DECISION");

                    b.Property<string>("EmployerInfo")
                        .HasColumnName("EMPLOYER_INFO");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormPath")
                        .HasColumnName("FORM_PATH");

                    b.Property<string>("FormerlyCaseNumber")
                        .HasColumnName("FORMERLY_CASE_NUMBER");

                    b.Property<DateTime?>("MailDate")
                        .HasColumnName("MAIL_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 939, DateTimeKind.Local).AddTicks(6980));

                    b.Property<string>("PartiesAppearing")
                        .HasColumnName("PARTIES_APPEARING");

                    b.Property<DateTime?>("PlaceOfHearingDate")
                        .HasColumnName("PLACE_OF_HEARING_DATE");

                    b.HasKey("Id")
                        .HasName("ALJ_DECISION_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("ALJ_DECISION_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Additional_Information.AdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClaimEffectiveDate")
                        .HasColumnName("CLAIM_EFFECTIVE_DATE");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("ControlNumber")
                        .HasColumnName("CONTROL_NUMBER");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("EmployerAddress")
                        .HasColumnName("EMPLOYER_ADDRESS");

                    b.Property<string>("EmployerName")
                        .HasColumnName("EMPLOYER_NAME");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormPath")
                        .HasColumnName("FORM_PATH");

                    b.Property<DateTime?>("MailDate")
                        .HasColumnName("MAIL_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 958, DateTimeKind.Local).AddTicks(1240));

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.HasKey("Id")
                        .HasName("ADDITIONAL_INFORMATION_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("ADDITIONAL_INFORMATION_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Associated_Documents.AssociatedDocuments", b =>
                {
                    b.Property<long>("FormId");

                    b.Property<long>("DocumentId");

                    b.HasKey("FormId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("ASSOCIATED_DOCUMENTS_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Attendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ScheduleId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("ATTENDEE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.CUIAB_Acknowledgement.CUIABAcknowledgement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABCaseNumber")
                        .HasColumnName("AB_CASE_NUMBER");

                    b.Property<string>("ALJDecisionNumber")
                        .HasColumnName("ALJ_DECISION_NUMBER");

                    b.Property<string>("AccountNumber")
                        .HasColumnName("ACCOUNT_NUMBER");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Appellant")
                        .HasColumnName("APPELLANT");

                    b.Property<string>("CUIABAddress")
                        .HasColumnName("CUIAB_ADDRESS");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<DateTime?>("DateMailed")
                        .HasColumnName("DATE_MAILED");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormPath")
                        .HasColumnName("FORM_PATH");

                    b.Property<string>("LAUSDAddress")
                        .HasColumnName("LAUSD_ADDRESS");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 946, DateTimeKind.Local).AddTicks(2609));

                    b.HasKey("Id")
                        .HasName("CUIAB_ACKNOWLEDGEMENT_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("CUIAB_ACKNOWLEDGEMENT_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.ClaimExceptions.ClaimException", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<long>("DocumentId")
                        .HasColumnName("DOCUMENT_ID");

                    b.Property<DateTime?>("ExceptionDate")
                        .HasColumnName("EXCEPTION_DATE");

                    b.Property<string>("ExceptionReason")
                        .HasColumnName("EXCEPTION_REASON");

                    b.Property<long>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 34, DateTimeKind.Local).AddTicks(2889));

                    b.HasKey("Id")
                        .HasName("CLAIM_EXCEPTION_ID");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FormId");

                    b.ToTable("CLAIM_EXCEPTION_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Appeal.ClaimAppeal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime?>("BYBClaimDate")
                        .HasColumnName("BYB_CLAIM_DATE");

                    b.Property<string>("City")
                        .HasColumnName("CITY");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("Date")
                        .HasColumnName("DATE");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<DateTime?>("FormDate")
                        .HasColumnName("FORM_DATE");

                    b.Property<string>("LAUSDAccountNumber")
                        .HasColumnName("LAUSD_ACCOUNT_NUMBER");

                    b.Property<string>("LAUSDEligibilityInformation")
                        .HasColumnName("LAUSD_ELIGIBILITY_INFORMATION");

                    b.Property<DateTime?>("LAUSDFaxDate")
                        .HasColumnName("LAUSD_FAX_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 916, DateTimeKind.Local).AddTicks(1808));

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<string>("RepresentativeName")
                        .HasColumnName("REPRESENTATIVE_NAME");

                    b.Property<string>("Signature")
                        .HasColumnName("SIGNATURE");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("State")
                        .HasColumnName("STATE");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE");

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE");

                    b.HasKey("Id")
                        .HasName("CLAIM_APPEAL_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("CLAIM_APPEAL_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Determination.ClaimDetermination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BenefitYearBegan")
                        .HasColumnName("BENEFIT_YEAR_BEGAN");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("Decision")
                        .HasColumnName("DECISION");

                    b.Property<string>("FieldOffice")
                        .HasColumnName("FIELD_OFFICE");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormPath")
                        .HasColumnName("FORM_PATH");

                    b.Property<DateTime?>("MailedDate")
                        .HasColumnName("MAILED_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 903, DateTimeKind.Local).AddTicks(8227));

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.HasKey("Id")
                        .HasName("CLAIM_DETERMINATION_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("CLAIM_DETERMINATION_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Interview.ClaimInterview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime?>("BYBClaimDate")
                        .HasColumnName("BYB_CLAIM_DATE");

                    b.Property<string>("City")
                        .HasColumnName("CITY");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("DETInterviewer")
                        .HasColumnName("DET_INTERVIEWER");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("DATE");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("EFFECTIVE_DATE");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("InterviewerPhoneNumber")
                        .HasColumnName("INTERVIEWER_PHONE_NUMBER");

                    b.Property<long?>("IssuesList")
                        .HasColumnName("ISSUES_LIST");

                    b.Property<DateTime?>("LAUSDFaxDate")
                        .HasColumnName("LAUSD_FAX_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 891, DateTimeKind.Local).AddTicks(7041));

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<DateTime?>("RepresentativeDate")
                        .HasColumnName("REPRESENTATIVE_DATE");

                    b.Property<string>("RepresentativeName")
                        .HasColumnName("REPRESENTATIVE_NAME");

                    b.Property<string>("Signature")
                        .HasColumnName("SIGNATURE");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("State")
                        .HasColumnName("STATE");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS");

                    b.Property<string>("Time")
                        .HasColumnName("TIME");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE");

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE");

                    b.HasKey("Id")
                        .HasName("CLAIM_INTERVIEW_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("CLAIM_INTERVIEW_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Response.ClaimResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime?>("BYBClaimDate")
                        .HasColumnName("BYB_CLAIM_DATE");

                    b.Property<string>("City")
                        .HasColumnName("CITY");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("DATE");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnName("DUE_DATE");

                    b.Property<bool>("EEContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EE_CONTRACT")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EffectiveDateOfClaim")
                        .HasColumnName("EFFECTIVE_DATE_OF_CLAIM");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<long?>("IssuesList")
                        .HasColumnName("ISSUES_LIST");

                    b.Property<DateTime?>("LAUSDMailDate")
                        .HasColumnName("LAUSD_MAIL_DATE");

                    b.Property<string>("LAUSDResponse")
                        .HasColumnName("LAUSD_RESPONSE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 878, DateTimeKind.Local).AddTicks(1699));

                    b.Property<bool>("OfferLetter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OFFER_LETTER")
                        .HasDefaultValue(false);

                    b.Property<bool>("Other")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OTHER")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<bool>("ProtestPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROTEST_PAGE")
                        .HasDefaultValue(false);

                    b.Property<bool>("RALetter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RA_LETTER")
                        .HasDefaultValue(false);

                    b.Property<string>("RepresentativeName")
                        .HasColumnName("REPRESENTATIVE_NAME");

                    b.Property<string>("Signature")
                        .HasColumnName("SIGNATURE");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("State")
                        .HasColumnName("STATE");

                    b.Property<bool>("StatementOfCharges")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATEMENT_OF_CHARGES")
                        .HasDefaultValue(false);

                    b.Property<bool>("SubCalender")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SUB_CALENDER")
                        .HasDefaultValue(false);

                    b.Property<bool>("TimeWageReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TIME_WAGE_REPORT")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .HasColumnName("TITLE");

                    b.Property<bool>("WarningLetters")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WARNING_LETTERS")
                        .HasDefaultValue(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("ZIPCODE");

                    b.HasKey("Id")
                        .HasName("CLAIM_RESPONSE_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("CLAIM_RESPONSE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Employees.Employee", b =>
                {
                    b.Property<string>("EmployeeNumberCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EMP_NUM_CODE");

                    b.Property<string>("ActiveEmployeeIndicator")
                        .HasColumnName("ACTIVE_EMPLOYEE_INDICATOR");

                    b.Property<string>("BirthDate")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnName("BIRTH_DAY");

                    b.Property<string>("BirthMonth")
                        .HasColumnName("BIRTH_MONTH");

                    b.Property<string>("BirthYear")
                        .HasColumnName("BIRTH_YEAR");

                    b.Property<string>("CityName")
                        .HasColumnName("CITY_NAME");

                    b.Property<string>("CountryISOCode")
                        .HasColumnName("COUNTRY_ISO_CODE");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("EmpTypeCode")
                        .HasColumnName("EMP_TYPE_CODE");

                    b.Property<string>("EthnicityCode")
                        .HasColumnName("ETHNICITY_CODE");

                    b.Property<string>("EthnicityDescription")
                        .HasColumnName("ETHNICITY_DESCR");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("GenderInd")
                        .HasColumnName("GENDER_IND");

                    b.Property<string>("HighestDegreeCode")
                        .HasColumnName("HIGHEST_DEGREE_CODE");

                    b.Property<string>("HighestDegreeName")
                        .HasColumnName("HIGHEST_DEGREE_NAME");

                    b.Property<string>("HouseNumberStreetAddress")
                        .HasColumnName("HOUSE_NUM_STREET_ADDR");

                    b.Property<string>("InitialName")
                        .HasColumnName("INITIAL_NAME,");

                    b.Property<string>("LanguageInd")
                        .HasColumnName("LANGUAGE_IND");

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnName("LAST_UPDATED_BY");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnName("LAST_UPDATE_DATE");

                    b.Property<string>("MiddleName")
                        .HasColumnName("MIDDLE_NAME");

                    b.Property<string>("OIDEmailAddress")
                        .HasColumnName("OID_EMAIL_ADDRESS");

                    b.Property<string>("OtherTitleName")
                        .HasColumnName("OTHER_TITLE_NAME");

                    b.Property<string>("PostalCode")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("RegionCode")
                        .HasColumnName("REGION_CODE");

                    b.Property<string>("SAPEmailAddress")
                        .HasColumnName("SAP_EMAIL_ADDRESS");

                    b.Property<string>("SAPUserIdCode")
                        .HasColumnName("SAP_USER_ID_CODE");

                    b.Property<string>("SEIDCode")
                        .HasColumnName("SEID_CODE");

                    b.Property<string>("SecondName")
                        .HasColumnName("SECOND_NAME");

                    b.Property<string>("SecondTitleName")
                        .HasColumnName("SECOND_TITLE_NAME");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnName("TELEPHONE_NUMBER");

                    b.Property<string>("TieBreaker")
                        .HasColumnName("TIE_BREAKER");

                    b.Property<string>("TitleName")
                        .HasColumnName("TITLE_NAME");

                    b.HasKey("EmployeeNumberCode");

                    b.ToTable("EMPLOYEE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Form_Document.FormDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Channel")
                        .HasColumnName("CHANNEL");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<long>("DocumentId")
                        .HasColumnName("DOCUMENT_ID");

                    b.Property<long>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 29, DateTimeKind.Local).AddTicks(884));

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnName("RECEIVED_DATE");

                    b.Property<string>("UploadFileName")
                        .HasColumnName("UPLOAD_FILE_NAME");

                    b.HasKey("Id")
                        .HasName("FORM_DOCUMENT_MAP_ID");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FormId");

                    b.ToTable("FORM_DOCUMENT_MAP_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Hearings.Hearing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdministrativeLawJudge")
                        .HasColumnName("ADMINISTRATIVE_LAW_JUDGE");

                    b.Property<string>("AppellantName")
                        .HasColumnName("APPELLANT_NAME");

                    b.Property<bool>("AppellantType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APPELLANT_TYPE")
                        .HasDefaultValue(false);

                    b.Property<string>("CaseNumber")
                        .HasColumnName("CASE_NUMBER");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("EDDOffice")
                        .HasColumnName("EDD_OFFICE");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<DateTime?>("HearingDate")
                        .HasColumnName("HEARING_DATE");

                    b.Property<string>("HearingPlace")
                        .HasColumnName("HEARING_PLACE");

                    b.Property<string>("HearingTime")
                        .HasColumnName("HEARING_TIME");

                    b.Property<long?>("IssuesList")
                        .HasColumnName("ISSUES_LIST");

                    b.Property<DateTime?>("MailDate")
                        .HasColumnName("MAIL_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 43, DateTimeKind.Local).AddTicks(9733));

                    b.Property<string>("Notes")
                        .HasColumnName("NOTES");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.HasKey("Id")
                        .HasName("NOTICE_OF_HEARING_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("NOTICE_OF_HEARING_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Issues_List.IssuesList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("IssueCode")
                        .HasColumnName("ISSUE_CODE");

                    b.Property<string>("IssueDecription")
                        .HasColumnName("ISSUE_DECRIPTION");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 920, DateTimeKind.Local).AddTicks(3700));

                    b.HasKey("Id")
                        .HasName("ISSUES_LIST_ID");

                    b.ToTable("ISSUES_LIST_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.MD_Document.MDDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("DocumentDescription")
                        .HasColumnName("DOCUMENT_DESCRIPTION");

                    b.Property<string>("DocumentName")
                        .HasColumnName("DOCUMENT_NAME");

                    b.Property<string>("DocumentStatus")
                        .HasColumnName("DOCUMENT_STATUS");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_MANDATORY")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 867, DateTimeKind.Local).AddTicks(5152));

                    b.HasKey("Id")
                        .HasName("MD_DOCUMENT_ID");

                    b.ToTable("MD_DOCUMENT_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.MD_Form.MDForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormName")
                        .HasColumnName("FORM_NAME");

                    b.Property<string>("FormStatus")
                        .HasColumnName("FORM_STATUS");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 862, DateTimeKind.Local).AddTicks(6099));

                    b.HasKey("Id")
                        .HasName("MD_FORM_ID");

                    b.ToTable("MD_FORM_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.New_Claim.Claim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalClaim")
                        .HasColumnName("ADDITIONAL_CLAIM");

                    b.Property<int>("BenefitYearBeginning")
                        .HasColumnName("BENEFIT_YEAR_BEGINNING");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("CurrentStage")
                        .HasColumnName("CURRENT_STAGE");

                    b.Property<DateTime?>("DateMailedToEDD")
                        .HasColumnName("DATE_MAILED_TO_EDD");

                    b.Property<DateTime?>("EffectiveDateOfClaim")
                        .HasColumnName("EFFECTIVE_DATE_OF_CLAIM");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnName("EMPLOYEE_NUMBER");

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER");

                    b.Property<DateTime?>("LastDateWorked")
                        .HasColumnName("LAST_DATE_WORKED");

                    b.Property<DateTime?>("MailDate")
                        .HasColumnName("MAIL_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 857, DateTimeKind.Local).AddTicks(3826));

                    b.Property<string>("NewClaim")
                        .HasColumnName("NEW_CLAIM");

                    b.Property<string>("ReasonForSeparation")
                        .HasColumnName("REASON_FOR_SEPARATION");

                    b.Property<string>("RequestNumber")
                        .HasColumnName("REQUEST_NUMBER");

                    b.Property<string>("RequestTitle")
                        .HasColumnName("REQUEST_TITLE");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("Type")
                        .HasColumnName("TYPE");

                    b.HasKey("Id")
                        .HasName("CLAIM_ID");

                    b.ToTable("CLAIM_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnName("EMPLOYEE_NUMBER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 963, DateTimeKind.Local).AddTicks(9472));

                    b.Property<string>("NotifyAttachment")
                        .HasColumnName("NOTIFY_ATTACHMENT")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("NotifyBCC")
                        .HasColumnName("NOTIFY_BCC");

                    b.Property<string>("NotifyBody")
                        .HasColumnName("NOTIFY_BODY")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("NotifyCC")
                        .HasColumnName("NOTIFY_CC");

                    b.Property<string>("NotifyFrom")
                        .HasColumnName("NOTIFY_FROM");

                    b.Property<string>("NotifyStatus")
                        .HasColumnName("NOTIFY_STATUS");

                    b.Property<string>("NotifySubject")
                        .HasColumnName("NOTIFY_SUBJECT");

                    b.Property<string>("NotifyTo")
                        .HasColumnName("NOTIFY_TO");

                    b.Property<string>("RequestType")
                        .HasColumnName("REQUEST_TYPE");

                    b.HasKey("Id")
                        .HasName("NOTIFY_ID");

                    b.ToTable("NOTIFICATION_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Questions.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<long>("FormId")
                        .HasColumnName("FORM_ID");

                    b.Property<string>("LAUSDQuestions")
                        .HasColumnName("LAUSD_QUESTIONS");

                    b.Property<string>("LAUSDResponses")
                        .HasColumnName("LAUSD_RESPONSES");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 897, DateTimeKind.Local).AddTicks(8867));

                    b.HasKey("Id")
                        .HasName("QUESTIONS_ID");

                    b.HasIndex("FormId");

                    b.ToTable("QUESTIONS_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RAAssociatedDocuments.RAAssociatedDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentationPath")
                        .HasColumnName("DOCUMENTATION_PATH");

                    b.Property<long>("RAScheduleId")
                        .HasColumnName("RA_SCHEDULE_ID");

                    b.Property<long>("RecipientId")
                        .HasColumnName("RECIPIENT_ID");

                    b.Property<string>("Type")
                        .HasColumnName("TYPE");

                    b.HasKey("Id")
                        .HasName("RA_ASSOCIATED_DOCUMENT_ID");

                    b.HasIndex("RAScheduleId");

                    b.HasIndex("RecipientId");

                    b.ToTable("RA_ASSOCIATED_DOCUMENT_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchRecipientRules.RABatchRecipientRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<long>("RecipientRuleId")
                        .HasColumnName("RECIPIENT_RULE_ID");

                    b.HasKey("Id")
                        .HasName("RA_BATCH_RECIP_RULE_MAP_ID");

                    b.HasIndex("BatchId");

                    b.HasIndex("RecipientRuleId");

                    b.ToTable("RA_BATCH_RECIP_RULE_MAP_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchRecipients.RABatchRecipient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<long>("RecipientId")
                        .HasColumnName("RECIPIENT_ID");

                    b.HasKey("Id")
                        .HasName("RA_BATCH_RECIPIENT_MAP_ID");

                    b.HasIndex("BatchId");

                    b.HasIndex("RecipientId");

                    b.ToTable("RA_BATCH_RECIPIENT_MAP_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchSchedules.RABatchSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<long>("RAScheduleId")
                        .HasColumnName("RA_SCHEDULE_ID");

                    b.HasKey("Id")
                        .HasName("RA_BATCH_SCHEDULE_MAP_ID");

                    b.HasIndex("BatchId");

                    b.HasIndex("RAScheduleId");

                    b.ToTable("RA_BATCH_SCHEDULE_MAP_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchTemplates.RABatchTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchId")
                        .HasColumnName("BATCH_ID");

                    b.Property<long>("TemplateId")
                        .HasColumnName("TEMPLATE_ID");

                    b.HasKey("Id")
                        .HasName("RA_BATCH_TEMPLATE_MAP_ID");

                    b.HasIndex("BatchId");

                    b.HasIndex("TemplateId");

                    b.ToTable("RA_BATCH_TEMPLATE_MAP_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchs.RABatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchDescription")
                        .HasColumnName("BATCH_DESCRIPTION");

                    b.Property<string>("BatchName")
                        .HasColumnName("BATCH_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("Frequency")
                        .HasColumnName("FREQUENCY");

                    b.Property<bool>("IsRecuring")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_RECURING")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 14, DateTimeKind.Local).AddTicks(5039));

                    b.Property<DateTime?>("NextOccurrance")
                        .HasColumnName("NEXT_OCCURRANCE");

                    b.Property<string>("Occurrance")
                        .HasColumnName("OCCURRANCE");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS");

                    b.Property<string>("Time")
                        .HasColumnName("TIME");

                    b.HasKey("Id")
                        .HasName("RA_BATCH_ID");

                    b.ToTable("RA_BATCH_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RARecipientRules.RARecipientRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 25, DateTimeKind.Local).AddTicks(1058));

                    b.Property<string>("RecipientRuleName")
                        .HasColumnName("RECIPIENT_RULE_NAME");

                    b.Property<string>("RecipientRuleStatus")
                        .HasColumnName("RECIPIENT_RULE_STATUS");

                    b.Property<string>("RecipientRuleType")
                        .HasColumnName("RECIPIENT_RULE_TYPE");

                    b.HasKey("Id")
                        .HasName("RA_RECIPIENT_RULE_ID");

                    b.ToTable("RA_RECIPIENT_RULE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RARecipients.RARecipient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<DateTime?>("DeliveredOn")
                        .HasColumnName("DELIVERED_ON");

                    b.Property<string>("DeliveryNotice")
                        .HasColumnName("DELIVERY_NOTICE")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("EmailReferenceNumber")
                        .HasColumnName("EMAIL_REFERENCE_NUMBER");

                    b.Property<string>("EmployeeEmail")
                        .HasColumnName("EMPLOYEE_EMAIL");

                    b.Property<string>("EmployeeName")
                        .HasColumnName("EMPLOYEE_NAME");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnName("EMPLOYEE_NUMBER");

                    b.Property<DateTime?>("FailedOn")
                        .HasColumnName("FAILED_ON");

                    b.Property<bool>("IsDeliveryMailCaptured")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELIVERY_MAIL_CAPTURED")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRetry")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_RETRY")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSentMailCaptured")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SENT_MAIL_CAPTURED")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSucessfullyDeliver")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SUCESSFULLY_DELIVER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 20, DateTimeKind.Local).AddTicks(5757));

                    b.Property<DateTime?>("NotifiedSentOn")
                        .HasColumnName("NOTIFIED_SENT_ON");

                    b.Property<string>("RequestType")
                        .HasColumnName("REQUEST_TYPE");

                    b.Property<int?>("RetryFail")
                        .HasColumnName("RETRY_FAIL");

                    b.Property<int?>("RetrySucess")
                        .HasColumnName("RETRY_SUCESS");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS");

                    b.HasKey("Id")
                        .HasName("RA_RECIPIENT_ID");

                    b.ToTable("RA_RECIPIENT_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RASchedules.RASchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<int?>("FailedDelivery")
                        .HasColumnName("FAILED_DELIVERY");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 39, 28, DateTimeKind.Local).AddTicks(2064));

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnName("SCHEDULE_DATE");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS");

                    b.Property<int?>("SucessfulDelivery")
                        .HasColumnName("SUCESSFUL_DELIVERY");

                    b.Property<int?>("TotalRecipient")
                        .HasColumnName("TOTAL_RECIPIENT");

                    b.HasKey("Id")
                        .HasName("RA_SCHEDULE_ID");

                    b.ToTable("RA_SCHEDULE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Response_to_Employer.ResponseToEmployer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BenefitYearBeganDate")
                        .HasColumnName("BENEFIT_YEAR_BEGAN_DATE");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<DateTime?>("DateMailed")
                        .HasColumnName("DATE_MAILED");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormPath")
                        .HasColumnName("FORM_PATH");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 908, DateTimeKind.Local).AddTicks(8822));

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.HasKey("Id")
                        .HasName("RESPONSE_TO_EMPLOYER_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("RESPONSE_TO_EMPLOYER_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 842, DateTimeKind.Local).AddTicks(2206));

                    b.Property<long?>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<long>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 843, DateTimeKind.Local).AddTicks(778));

                    b.Property<long?>("ModifierId");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime>("TimeEnd");

                    b.Property<DateTime>("TimeStart");

                    b.Property<string>("Title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("SCHEDULE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Templates.Template", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<string>("LetterType")
                        .HasColumnName("LETTER_TYPE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 968, DateTimeKind.Local).AddTicks(328));

                    b.Property<string>("TemplateAttachmentContent")
                        .HasColumnName("TEMPLATE_ATTACHMENT_CONTENT")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("TemplateBodyContent")
                        .HasColumnName("TEMPLATE_BODY_CONTENT")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("TemplateCategory")
                        .HasColumnName("TEMPLATE_CATEGORY");

                    b.Property<string>("TemplateDescription")
                        .HasColumnName("TEMPLATE_DESCRIPTION");

                    b.Property<string>("TemplateName")
                        .HasColumnName("TEMPLATE_NAME");

                    b.Property<string>("TemplateStatus")
                        .HasColumnName("TEMPLATE_STATUS");

                    b.Property<string>("TemplateType")
                        .HasColumnName("TEMPLATE_TYPE");

                    b.HasKey("Id")
                        .HasName("TEMPLATE_ID");

                    b.ToTable("TEMPLATE_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Profession");

                    b.HasKey("Id");

                    b.ToTable("USER_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Wages_After_Appeal.WagesAfterAppeal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseNumber")
                        .HasColumnName("CASE_NUMBER");

                    b.Property<long>("ClaimId")
                        .HasColumnName("CLAIM_ID");

                    b.Property<string>("ClaimantName")
                        .HasColumnName("CLAIMANT_NAME");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON");

                    b.Property<DateTime?>("DeadLineDate")
                        .HasColumnName("DEADLINE_DATE");

                    b.Property<string>("FaxNumber")
                        .HasColumnName("FAX_NUMBER");

                    b.Property<string>("FormCode")
                        .HasColumnName("FORM_CODE");

                    b.Property<string>("FormPath")
                        .HasColumnName("FORM_PATH");

                    b.Property<DateTime?>("MailingDate")
                        .HasColumnName("MAILING_DATE");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime?>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED_ON")
                        .HasDefaultValue(new DateTime(2020, 3, 12, 11, 31, 38, 951, DateTimeKind.Local).AddTicks(7775));

                    b.Property<string>("PreparerName")
                        .HasColumnName("PREPARER_NAME");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnName("TELEPHONE_NUMBER");

                    b.HasKey("Id")
                        .HasName("WAGES_AFTER_APPEAL_ID");

                    b.HasIndex("ClaimId")
                        .IsUnique();

                    b.ToTable("WAGES_AFTER_APPEAL_TBL");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.ALJ_Decision.ALJDecision", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("ALJdecision")
                        .HasForeignKey("UICMA.Domain.Entities.ALJ_Decision.ALJDecision", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Additional_Information.AdditionalInformation", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("additionalInformation")
                        .HasForeignKey("UICMA.Domain.Entities.Additional_Information.AdditionalInformation", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Associated_Documents.AssociatedDocuments", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.MD_Document.MDDocument", "MDDocument")
                        .WithMany("AssociatedDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.MD_Form.MDForm", "MDForms")
                        .WithMany("AssociatedDocuments")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Attendee", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.Schedule", "Schedule")
                        .WithMany("Attendees")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.User", "User")
                        .WithMany("SchedulesAttended")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.CUIAB_Acknowledgement.CUIABAcknowledgement", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("acknowledgement")
                        .HasForeignKey("UICMA.Domain.Entities.CUIAB_Acknowledgement.CUIABAcknowledgement", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.ClaimExceptions.ClaimException", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.MD_Document.MDDocument", "MDDocument")
                        .WithMany("ClaimExceptions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.MD_Form.MDForm", "MDForm")
                        .WithMany("ClaimExceptions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Appeal.ClaimAppeal", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("claimAppeal")
                        .HasForeignKey("UICMA.Domain.Entities.Claim_Appeal.ClaimAppeal", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Determination.ClaimDetermination", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("claimDetermination")
                        .HasForeignKey("UICMA.Domain.Entities.Claim_Determination.ClaimDetermination", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Interview.ClaimInterview", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("claimInterview")
                        .HasForeignKey("UICMA.Domain.Entities.Claim_Interview.ClaimInterview", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Claim_Response.ClaimResponse", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("claimResponse")
                        .HasForeignKey("UICMA.Domain.Entities.Claim_Response.ClaimResponse", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Form_Document.FormDocument", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.MD_Document.MDDocument", "MDDocument")
                        .WithMany("FormDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.MD_Form.MDForm", "MDForm")
                        .WithMany("FormDocuments")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Hearings.Hearing", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("hearing")
                        .HasForeignKey("UICMA.Domain.Entities.Hearings.Hearing", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Questions.Question", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.Claim_Interview.ClaimInterview", "claimInterview")
                        .WithMany("questions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RAAssociatedDocuments.RAAssociatedDocument", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.RASchedules.RASchedule", "RAschedule")
                        .WithMany("RAassociatedDocument")
                        .HasForeignKey("RAScheduleId")
                        .HasConstraintName("ASS_DOC_SCHEDULE_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.RARecipients.RARecipient", "RArecipient")
                        .WithMany("RAassociatedDocument")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchRecipientRules.RABatchRecipientRule", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.RABatchs.RABatch", "RAbatch")
                        .WithMany("RAbatchRecipientRule")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.RARecipientRules.RARecipientRule", "RArecipientRule")
                        .WithMany("RAbatchRecipientRule")
                        .HasForeignKey("RecipientRuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchRecipients.RABatchRecipient", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.RABatchs.RABatch", "RAbatch")
                        .WithMany("RAbatchRecipient")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.RARecipients.RARecipient", "RArecipient")
                        .WithMany("RAbatchRecipient")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchSchedules.RABatchSchedule", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.RABatchs.RABatch", "RAbatch")
                        .WithMany("RAbatchSchedule")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.RASchedules.RASchedule", "RAschedule")
                        .WithMany("RAbatchSchedule")
                        .HasForeignKey("RAScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.RABatchTemplates.RABatchTemplate", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.RABatchs.RABatch", "RAbatch")
                        .WithMany("RAbatchTemplate")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UICMA.Domain.Entities.Templates.Template", "template")
                        .WithMany("RAbatchTemplate")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Response_to_Employer.ResponseToEmployer", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("responsetoEmployer")
                        .HasForeignKey("UICMA.Domain.Entities.Response_to_Employer.ResponseToEmployer", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.User", "Creator")
                        .WithMany("SchedulesCreated")
                        .HasForeignKey("CreatorId");

                    b.HasOne("UICMA.Domain.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");
                });

            modelBuilder.Entity("UICMA.Domain.Entities.Wages_After_Appeal.WagesAfterAppeal", b =>
                {
                    b.HasOne("UICMA.Domain.Entities.New_Claim.Claim", "claim")
                        .WithOne("wagesAfterAppeal")
                        .HasForeignKey("UICMA.Domain.Entities.Wages_After_Appeal.WagesAfterAppeal", "ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
